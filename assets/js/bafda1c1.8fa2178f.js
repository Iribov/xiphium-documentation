"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9807],{494:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>d,toc:()=>l});var i=t(5893),o=t(1151);const s={title:"Xiphium 2024-W17 update",authors:["jim"]},r=void 0,d={permalink:"/xiphium-documentation/blog/2024/04/26/Xiphium-W17-Update",editUrl:"https://github.com/Iribov/xiphium-documentation/edit/main/blog/2024-04-26-Xiphium-W17-Update/index.md",source:"@site/blog/2024-04-26-Xiphium-W17-Update/index.md",title:"Xiphium 2024-W17 update",description:"Here is the weekly update of (significant) changes made in Xiphium this week, extracted from Git(Hub).",date:"2024-04-26T00:00:00.000Z",formattedDate:"April 26, 2024",tags:[],readingTime:4.075,hasTruncateMarker:!0,authors:[{name:"Jim Kerver",title:"4D Developer @Iribov",url:"https://github.com/Jim-Kerver",imageURL:"https://github.com/Jim-Kerver.png",key:"jim"}],frontMatter:{title:"Xiphium 2024-W17 update",authors:["jim"]},unlisted:!1,prevItem:{title:"Xiphium 2024-W18 update",permalink:"/xiphium-documentation/blog/2024/05/03/Xiphium-W18-Update"},nextItem:{title:"Xiphium 2024-W16 update",permalink:"/xiphium-documentation/blog/2024/04/19/Xiphium-W16-Update"}},a={authorsImageUrls:[void 0]},l=[{value:"Constants",id:"constants",level:2},{value:"Project2",id:"project2",level:2},{value:"Project2 Year &#39;Duplicate&#39; fields",id:"project2-year-duplicate-fields",level:3},{value:"Project2_Year &amp; Invoices",id:"project2_year--invoices",level:3},{value:"Invoices",id:"invoices",level:2},{value:"Analysis Lab invoices",id:"analysis-lab-invoices",level:3},{value:"Delivery Invoices",id:"delivery-invoices",level:3},{value:"Greenhouse-Field invoice",id:"greenhouse-field-invoice",level:3},{value:"Equipment Maintenance",id:"equipment-maintenance",level:2},{value:"Experiment Scan Menu",id:"experiment-scan-menu",level:2},{value:"Greenhouse Field",id:"greenhouse-field",level:2},{value:"Deliveries",id:"deliveries",level:2},{value:"TC_Reg_Emp",id:"tc_reg_emp",level:2},{value:"Web Stuff",id:"web-stuff",level:2}];function c(e){const n={admonition:"admonition",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,o.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Here is the weekly update of (significant) changes made in Xiphium this week, extracted from Git(Hub)."}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsx)(n.p,{children:"These are interpretations of code read from the weekly changes from Git(Hub) and are therefore prone to errors."})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsx)(n.p,{children:"Because of the many changes this week, I will only cover changes in methods. I will try to find significant changes object methods (i.e. 'buttons') but will probably miss some."})}),"\n",(0,i.jsx)(n.h2,{id:"constants",children:"Constants"}),"\n",(0,i.jsxs)(n.p,{children:["New methods have been added to (more) easily add Constants. Constants are a really nice way of providing a value that is consistent withing the runtime of a database, but is prone to change in different instances. The nice thing about constants is that they can be used in the code, and the value(s) do not live inside of the Data file. ",(0,i.jsx)(n.strong,{children:"Default_Company"})," is probably a great example of where a constant could be used."]}),"\n",(0,i.jsx)(n.p,{children:"The newly created methods make it easy to create constants in code, instead of creating the constant file(s) manually.\nThe added methods are:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"Constants_Add"})})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"Constants_AddGroup"})})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"Constants_ExportToFile"})})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"Constants_New"})})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"Constants_Setup"})})}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"Constants_ExportToFile"})})," is added to the ",(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"App_OnStartup"})})," method, so this method created the constant file(s) when the app is started."]}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsx)(n.p,{children:"As a rule of thumb: Code should rarely use hard coded values. It should use constants instead. These constants should also be well documented to avoid duplication and/or confusion of where they are used and for what."})}),"\n",(0,i.jsx)(n.h2,{id:"project2",children:"Project2"}),"\n",(0,i.jsx)(n.p,{children:"[Project2_Year] has a new input form called 'Greenhouse'"}),"\n",(0,i.jsxs)(n.p,{children:["Method ",(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"Pro2Y_UpdateRecord"})})," had several adjustments:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Connect to a [Project2] through either an (entered) Project2 IDM, or an entered ProjectCode2_Long. When both are changed at same time, IDM takes the priority."}),"\n",(0,i.jsx)(n.li,{children:"Calculate both the Cost and Turnover using its ProjectCode2_Long and Year to look for invoices."}),"\n",(0,i.jsx)(n.li,{children:"If Turnover is bigger than the current budget (budget A), Calculate Saldo (leftover budget) using the turnover instead of the budget."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"project2-year-duplicate-fields",children:"Project2 Year 'Duplicate' fields"}),"\n",(0,i.jsx)(n.p,{children:"[Project2_Year] contains a lot of fields that are also in table [Project2]. This duplication should be unnecessary because a [Project2_Year] is linked to [Project2]. These duplicated [Project2_Year] fields have replaced by the related [Project2] Fields in both the code and the Forms. The 'duplicate' [Project2_Year] fields are not deleted (yet!)."}),"\n",(0,i.jsx)(n.p,{children:"The only place where this might be a problem is in the Project2 Detail forms where you can use the radio button to summon other [Project2_Year] records that are not related to the opened [Project2]. Is this something we're supposed to support? And isn't that what the [Project2_Year] List form is for?"}),"\n",(0,i.jsx)(n.p,{children:"The changes fields are:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"ProjectCode1"}),"\n",(0,i.jsx)(n.li,{children:"ProjectCode2"}),"\n",(0,i.jsx)(n.li,{children:"ComCode_Prod"}),"\n",(0,i.jsx)(n.li,{children:"ComName Prod"}),"\n",(0,i.jsx)(n.li,{children:"ComCode Customer"}),"\n",(0,i.jsx)(n.li,{children:"ComName Customer"}),"\n",(0,i.jsx)(n.li,{children:"CropCode"}),"\n",(0,i.jsx)(n.li,{children:"CropName"}),"\n",(0,i.jsx)(n.li,{children:"WorkType"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"project2_year--invoices",children:"Project2_Year & Invoices"}),"\n",(0,i.jsxs)(n.p,{children:["Method ",(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"Pro2Y_RadioB_InD"})})," has been added to filter Invoice_Items based on radio buttons in the Invoice tab of the Project2_Year detail form."]}),"\n",(0,i.jsx)(n.h2,{id:"invoices",children:"Invoices"}),"\n",(0,i.jsxs)(n.p,{children:["Method ",(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"InV_UpdateRecord"})})," has had a lot of code changes. This is mostly replacing classic 4D queries with ORDA queries."]}),"\n",(0,i.jsxs)(n.p,{children:["Method ",(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"InD_UpdateRecord"})})," has been adjusted to look for a [Project2_Year] using the ProjectCode1 long Creditor and the invoice year. The method now also auto generates the ProjectCode2 Creditor according to the entered parameters in invoice."]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsx)(n.p,{children:"The ProjectCode2 Creditor is only entered once. If any parameters are changed (comcode credtior, work type, crop, etc.) after running this code once, the projectcode2 long creditor will not change."})}),"\n",(0,i.jsx)(n.h3,{id:"analysis-lab-invoices",children:"Analysis Lab invoices"}),"\n",(0,i.jsx)(n.p,{children:"There was a mistake made in the code that creates invoices form Analysis. The wrong project2 Field was filled with the projectcode2_long. Now, created invoices are able to be found as 'cost analysis' (if a correct projectcode2 is entered in the [Analysis_Order] before creating the invoice)."}),"\n",(0,i.jsx)(n.h3,{id:"delivery-invoices",children:"Delivery Invoices"}),"\n",(0,i.jsxs)(n.p,{children:["Method ",(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"DeN_CreateInvoice_DiT"})})," has been modified to also copy the comcode Production to the invoice."]}),"\n",(0,i.jsx)(n.h3,{id:"greenhouse-field-invoice",children:"Greenhouse-Field invoice"}),"\n",(0,i.jsxs)(n.p,{children:["Method ",(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"GF_CreateInvoice_WBP"})})," has been modified to also copy the comcode Production to the invoice."]}),"\n",(0,i.jsx)(n.h2,{id:"equipment-maintenance",children:"Equipment Maintenance"}),"\n",(0,i.jsxs)(n.p,{children:["Method ",(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"EqMa_UpdateRecord"})})," has its status logic improved."]}),"\n",(0,i.jsx)(n.h2,{id:"experiment-scan-menu",children:"Experiment Scan Menu"}),"\n",(0,i.jsxs)(n.p,{children:["Method ",(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"ExT_AddObservationColumns"})})," has been edited to be able to display more than 1 Treatment listbox in the same form. It now used a generated UUID for the column and header object names to make sure they are unique."]}),"\n",(0,i.jsx)(n.h2,{id:"greenhouse-field",children:"Greenhouse Field"}),"\n",(0,i.jsxs)(n.p,{children:["Method ",(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"GF_ExportExcelReportEstimateQC"})})," now also exports Medium codes of bundled Delivery_Items as well as the 'DiT_Q_Medium_Score' (if it's above 0)."]}),"\n",(0,i.jsx)(n.h2,{id:"deliveries",children:"Deliveries"}),"\n",(0,i.jsx)(n.p,{children:"New input form 'Notes' is added."}),"\n",(0,i.jsx)(n.p,{children:"Delivery_Items 'tools' button now has the 'Create Complaint' option added."}),"\n",(0,i.jsx)(n.h2,{id:"tc_reg_emp",children:"TC_Reg_Emp"}),"\n",(0,i.jsx)(n.p,{children:"Buttons 'Goto Next TC_Reg' and 'Goto Prev TC_Reg' have been added. These buttons go to the next/previous 'cycle' of the TC_Reg_Emp record(s)."}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsx)(n.p,{children:"The list Form is getting a little full with 'Goto' buttons. Maybe a drop-down or a 'Tools' buttons will be useful here?"})}),"\n",(0,i.jsx)(n.h2,{id:"web-stuff",children:"Web Stuff"}),"\n",(0,i.jsxs)(n.p,{children:["Some refactoring has been going on: method ",(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"Scanning_UploadDeliveries"})})," has been renamed to ",(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"Web_Scanning_UploadDeliveries"})}),"."]}),"\n",(0,i.jsxs)(n.p,{children:['category "delivery-item-experiment" has been added tot be added to onedrive in the method ',(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"Web_PhotosSave"})})]})]})}function h(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>d,a:()=>r});var i=t(7294);const o={},s=i.createContext(o);function r(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);