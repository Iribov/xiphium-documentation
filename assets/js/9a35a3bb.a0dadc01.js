"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7939],{3729:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>c,frontMatter:()=>r,metadata:()=>d,toc:()=>l});var i=n(5893),a=n(1151);const r={title:"Xiphium 2025-W01 update",authors:["jim"]},s=void 0,d={permalink:"/xiphium-documentation/blog/2025/01/03/Xiphium-W01-Update/Index",editUrl:"https://github.com/Iribov/xiphium-documentation/edit/main/blog/2025-01-03-Xiphium-W01-Update/Index.md",source:"@site/blog/2025-01-03-Xiphium-W01-Update/Index.md",title:"Xiphium 2025-W01 update",description:"Here is the weekly update of (significant) changes made in Xiphium this week, extracted from Git(Hub).",date:"2025-01-03T00:00:00.000Z",formattedDate:"January 3, 2025",tags:[],readingTime:2.82,hasTruncateMarker:!0,authors:[{name:"Jim Kerver",title:"4D Developer @Iribov",url:"https://github.com/Jim-Kerver",imageURL:"https://github.com/Jim-Kerver.png",key:"jim"}],frontMatter:{title:"Xiphium 2025-W01 update",authors:["jim"]},unlisted:!1,prevItem:{title:"Xiphium 2025-W02 update",permalink:"/xiphium-documentation/blog/2025/01/10/Xiphium-W02-Update/Index"},nextItem:{title:"Xiphium 2024-W52 update",permalink:"/xiphium-documentation/blog/2024/12/28/Xiphium-W52-Update/Index"}},o={authorsImageUrls:[void 0]},l=[{value:"Catalog changes",id:"catalog-changes",level:2},{value:"Greenhouse_Field",id:"greenhouse_field",level:2},{value:"Documents",id:"documents",level:2},{value:"Print Labels",id:"print-labels",level:2},{value:"Table",id:"table",level:2}];function h(e){const t={admonition:"admonition",code:"code",em:"em",h2:"h2",img:"img",p:"p",pre:"pre",strong:"strong",...(0,a.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{src:n(6865).Z+"",width:"1633",height:"980"})}),"\n",(0,i.jsx)(t.p,{children:"Here is the weekly update of (significant) changes made in Xiphium this week, extracted from Git(Hub)."}),"\n",(0,i.jsx)(t.admonition,{type:"warning",children:(0,i.jsx)(t.p,{children:"These are interpretations of code read from the weekly changes from Git(Hub) and are therefore prone to errors."})}),"\n",(0,i.jsx)(t.h2,{id:"catalog-changes",children:"Catalog changes"}),"\n",(0,i.jsx)(t.p,{children:"Field 'Con_ID_Com' is added to the [Contact] table."}),"\n",(0,i.jsxs)(t.admonition,{type:"danger",children:[(0,i.jsx)(t.p,{children:"Several tables have been renamed. This causes many changes in forms and methods, making it difficult/time consuming to decipher what has actually been changed, and what's just a consequence of the name change."}),(0,i.jsx)(t.p,{children:"For this reason, only project method changes will be discussed this week."})]}),"\n",(0,i.jsx)(t.p,{children:"Table [CropWeek] has been renamed to [CropC_Week]."}),"\n",(0,i.jsx)(t.p,{children:"Table [ComPCropY] has been renamed to [CropC_Year]."}),"\n",(0,i.jsx)(t.p,{children:"Field 'Doc_Rec_Link' has been added to the [Document] table."}),"\n",(0,i.jsx)(t.p,{children:"Table [Items_Lines] has been renamed to [Table]. All fields have their prefix 'It_' changed to 'Table_'."}),"\n",(0,i.jsx)(t.p,{children:"An automatic index is added for field [Mutations_Employee]MuEm_Date_Created."}),"\n",(0,i.jsx)(t.admonition,{type:"tip",children:(0,i.jsx)(t.p,{children:"Automatic indexes default to a B-Tree (except on boolean fields). A Cluster B-Tree index is beneficial for data that has repetition in it. The more repetition the data has, the more beneficial a cluster is. Because many [Mutations_Employee] records get created every day, many of them contain the same date, therefore making it more beneficial to Index as a cluster, compared to a regular B-Tree."})}),"\n",(0,i.jsx)(t.h2,{id:"greenhouse_field",children:"Greenhouse_Field"}),"\n",(0,i.jsxs)(t.p,{children:["Method ",(0,i.jsx)(t.em,{children:(0,i.jsx)(t.strong,{children:"GF_ListboxHandler"})})," has been added. The method seems to be a preparation to provide functionality for Greenhouse-Field records displayed in a listbox. The method is not implemented anywhere yet."]}),"\n",(0,i.jsxs)(t.admonition,{title:"New year, new syntax!",type:"danger",children:[(0,i.jsxs)(t.p,{children:["Method ",(0,i.jsx)(t.em,{children:(0,i.jsx)(t.strong,{children:"GF_ListboxHandler"})})," did not use the ",(0,i.jsx)(t.code,{children:"#DECLARE"})," syntax for parameters, but used to old $1, $2 syntax."]}),(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{src:n(3859).Z+"",width:"422",height:"455"})})]}),"\n",(0,i.jsx)(t.h2,{id:"documents",children:"Documents"}),"\n",(0,i.jsxs)(t.p,{children:["Method ",(0,i.jsx)(t.em,{children:(0,i.jsx)(t.strong,{children:"Doc_Updaterecord"})})," has been modified to update the amount of records linked to it. This number is saved into the new [Document]Doc_Rec_Link field."]}),"\n",(0,i.jsx)(t.h2,{id:"print-labels",children:"Print Labels"}),"\n",(0,i.jsx)(t.p,{children:"A logical error has been fixed in several sticker printing methods.\nThe previous code:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-4D",children:'$data:=String_Substitute($data; "year"; String(Year of([TC_Reg_Emp]TC2E_Date)-2000; "00"))\n'})}),"\n",(0,i.jsxs)(t.p,{children:["Takes the year of the date and uses that year as part of a year-week format. This is not robust, the beginning of 2025 is a good example of that:\n",(0,i.jsx)(t.code,{children:"30-12-2024 = 2025-W01"})]}),"\n",(0,i.jsx)(t.p,{children:"This error is fixed by using the DateTime_GetYearWeekNr, which returns the correct year-week according to ISO 8601. Resulting in the following code:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-4D",children:'\t\t$data:=String_Substitute($data; "year"; Substring(DateTime_GetYearWeekNr([TC_Reg_Emp:131]TC2E_Date); 3; 2))\n'})}),"\n",(0,i.jsx)(t.h2,{id:"table",children:"Table"}),"\n",(0,i.jsxs)(t.p,{children:["Method ",(0,i.jsx)(t.em,{children:(0,i.jsx)(t.strong,{children:"Table_GetCustomTableName"})})," takes table pointer and returns the custom table name.  This method should/could be used in multiple places to set the user facing name of the table. For instance: every Output form has a Text field on the top left displaying the 'Custom Table Name'. This is now done via hardcoded text, but should/could be replaced by this method so future name changes can be done once, and applied everywhere."]}),"\n",(0,i.jsxs)(t.p,{children:["Method ",(0,i.jsx)(t.em,{children:(0,i.jsx)(t.strong,{children:"Table_GetPrimaryKey"})})," takes a table pointer and returns a pointer to the primary key field. This is now done by one big ",(0,i.jsx)(t.code,{children:"Case Of"})," statement that needs to be filled manually whenever a table is added or a primary key is changed. ORDA can do this automatically using the following code:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-4D",children:"ds[tableName].getInfo().primaryKey\n"})}),"\n",(0,i.jsxs)(t.p,{children:["The entire method ",(0,i.jsx)(t.em,{children:(0,i.jsx)(t.strong,{children:"Table_GetPrimaryKey"})})," could be replaced with the following code:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-4D",children:"// (PM) Table_GetPrimaryKey\n// Returns the primary key fieldPointer for the given tablePointer\n#DECLARE($tablePtr : Pointer)->$fieldPtr : Pointer\nvar $tableName; $pKeyFieldName : Text\nvar $fieldNr : Integer\n\n$tableName:=Table name($tablePtr)\n$pKeyFieldName:=ds[$tableName].getInfo().primaryKey\n$fieldNr:=ds[$tableName][$pKeyFieldName].fieldNumber\n$fieldPtr:=Field(Table($tablePtr); $fieldNr)\n"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.em,{children:"Do note that this method needs a valid table pointer, otherwise errors will be generated."})})]})}function c(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},6865:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/2025-happy-new-year-background-design-greeting-card-banner-poster-illustration-vector-acee55ad90b35e1e2228bba4994b4712.jpg"},3859:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/Im_Watching_You_Meme-750b1eff795dbf8df0e2f293aced9154.jpg"},1151:(e,t,n)=>{n.d(t,{Z:()=>d,a:()=>s});var i=n(7294);const a={},r=i.createContext(a);function s(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);